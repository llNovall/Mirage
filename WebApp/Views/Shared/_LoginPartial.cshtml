@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<div class="row justify-content-end text-center text-md-end">
   
@{
    if (SignInManager.IsSignedIn(User))
    {
        <div class="col btn-group">
            <button type="button" class="btn btn-secondary rounded-0 dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false" >
                    @{
                        IdentityUser? user = await UserManager.GetUserAsync(User);

                        if(user != null)
                        {
                            var identityRoles = await UserManager.GetRolesAsync(user);

                            if(identityRoles.Count == 0)
                            {
                                <span>Signed In as @UserManager.GetUserName(User)</span>
                            }
                            else
                            {
                                <span>Signed In as @UserManager.GetUserName(User) (@identityRoles[0]) </span>
                            }

                        }
                    }
            </button>

            <ul class="dropdown-menu dropdown-menu-end bg-secondary text-white text-center">
                <li>
                    <form class="form-inline" method="post">
                        <a class="dropdown-item" id="logout" asp-controller="Logout" asp-action="Logout">Logout</a>
                    </form>
                </li>
            </ul>
        </div>
    }
    else
    {
        <div class="">
                <a class="btn bg-primary rounded-1 border-1 border-secondary-subtle text-white" id="login" asp-area="Identity" asp-page="/Account/Login"><i class="bi bi-person-fill"></i> Login</a>
                <a class="btn btn-primary rounded-1 border-1 border-primary-subtle" id="register" asp-area="Identity" asp-page="/Account/Register">Sign Up</a>
        </div>
    }
}

</div>
